/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, the Altera Quartus Prime License Agreement,
the Altera MegaCore Function License Agreement, or other 
applicable license agreement, including, without limitation, 
that your use is for the sole purpose of programming logic 
devices manufactured by Altera and sold by Altera or its 
authorized distributors.  Please refer to the applicable 
agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 1000.0;
	SIMULATION_TIME = 0.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 200.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("y")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("y[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "y";
}

SIGNAL("y[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "y";
}

SIGNAL("y[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "y";
}

SIGNAL("y[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "y";
}

SIGNAL("x")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("x[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "x";
}

SIGNAL("x[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "x";
}

SIGNAL("x[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "x";
}

SIGNAL("x[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "x";
}

SIGNAL("S")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 4;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("S[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "S";
}

SIGNAL("S[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "S";
}

SIGNAL("S[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "S";
}

SIGNAL("S[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "S";
}

SIGNAL("ADD/SUB")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("COUT")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("y[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 2.997;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 114.0;
			LEVEL 1 FOR 86.0;
		}
		LEVEL 0 FOR 114.0;
		LEVEL 1 FOR 105.379;
		LEVEL 0 FOR 81.334;
		LEVEL 1 FOR 51.999;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 81.334;
			LEVEL 1 FOR 51.999;
		}
		LEVEL 0 FOR 81.334;
		LEVEL 1 FOR 44.817;
		LEVEL 0 FOR 34.667;
		LEVEL 1 FOR 31.999;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 34.667;
			LEVEL 1 FOR 31.999;
		}
		LEVEL 0 FOR 34.667;
		LEVEL 1 FOR 16.808;
	}
}

TRANSITION_LIST("y[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 29.126;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 72.0;
			LEVEL 1 FOR 61.333;
		}
		LEVEL 0 FOR 72.0;
		LEVEL 1 FOR 50.015;
		LEVEL 0 FOR 42.667;
		LEVEL 1 FOR 23.999;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 42.667;
			LEVEL 1 FOR 23.999;
		}
		LEVEL 0 FOR 42.667;
		LEVEL 1 FOR 32.97;
		LEVEL 0 FOR 130.0;
		LEVEL 1 FOR 45.639;
		LEVEL 0 FOR 40.667;
		LEVEL 1 FOR 25.999;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 40.667;
			LEVEL 1 FOR 25.999;
		}
		LEVEL 0 FOR 40.667;
		LEVEL 1 FOR 23.586;
	}
}

TRANSITION_LIST("y[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 27.695;
		LEVEL 0 FOR 276.0;
		LEVEL 1 FOR 99.029;
		LEVEL 0 FOR 130.0;
		LEVEL 1 FOR 70.0;
		LEVEL 0 FOR 130.0;
		LEVEL 1 FOR 67.276;
		LEVEL 0 FOR 10.688;
		LEVEL 1 FOR 21.999;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 44.667;
			LEVEL 1 FOR 21.999;
		}
		LEVEL 0 FOR 33.981;
	}
}

TRANSITION_LIST("y[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 16.876;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 65.334;
			LEVEL 1 FOR 67.999;
		}
		LEVEL 0 FOR 65.334;
		LEVEL 1 FOR 51.124;
		LEVEL 0 FOR 4.409;
		LEVEL 1 FOR 24.666;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 42.0;
			LEVEL 1 FOR 24.666;
		}
		LEVEL 0 FOR 37.593;
		LEVEL 1 FOR 15.772;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 84.0;
			LEVEL 1 FOR 49.333;
		}
		LEVEL 0 FOR 84.0;
		LEVEL 1 FOR 33.562;
	}
}

TRANSITION_LIST("x[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 0.258;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 84.0;
			LEVEL 1 FOR 49.333;
		}
		LEVEL 0 FOR 84.0;
		LEVEL 1 FOR 66.175;
		LEVEL 0 FOR 82.0;
		LEVEL 1 FOR 119.098;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 100.0;
		LEVEL 0 FOR 100.0;
		LEVEL 1 FOR 81.803;
	}
}

TRANSITION_LIST("x[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 7.364;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 66.667;
			LEVEL 1 FOR 66.666;
		}
		LEVEL 0 FOR 66.667;
		LEVEL 1 FOR 72.559;
		LEVEL 0 FOR 92.0;
		LEVEL 1 FOR 41.333;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 92.0;
			LEVEL 1 FOR 41.333;
		}
		LEVEL 0 FOR 92.0;
		LEVEL 1 FOR 54.082;
		LEVEL 0 FOR 112.0;
		LEVEL 1 FOR 61.996;
	}
}

TRANSITION_LIST("x[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 25.041;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 88.0;
			LEVEL 1 FOR 45.333;
		}
		LEVEL 0 FOR 88.0;
		LEVEL 1 FOR 41.625;
		LEVEL 0 FOR 63.0;
		LEVEL 1 FOR 37.0;
		LEVEL 0 FOR 63.0;
		LEVEL 1 FOR 36.482;
		LEVEL 0 FOR 136.0;
		LEVEL 1 FOR 72.053;
		LEVEL 0 FOR 61.0;
		LEVEL 1 FOR 39.0;
		LEVEL 0 FOR 61.0;
		LEVEL 1 FOR 10.133;
	}
}

TRANSITION_LIST("x[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 2.622;
		LEVEL 0 FOR 240.0;
		LEVEL 1 FOR 159.364;
		LEVEL 0 FOR 94.0;
		LEVEL 1 FOR 124.241;
		LEVEL 0 FOR 45.333;
		LEVEL 1 FOR 21.333;
		NODE
		{
			REPEAT = 1;
			LEVEL 0 FOR 45.333;
			LEVEL 1 FOR 21.333;
		}
		LEVEL 0 FOR 45.333;
		LEVEL 1 FOR 8.234;
		LEVEL 0 FOR 63.0;
		LEVEL 1 FOR 37.0;
		LEVEL 0 FOR 63.0;
		LEVEL 1 FOR 29.874;
	}
}

TRANSITION_LIST("S[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("S[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("S[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("S[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

TRANSITION_LIST("ADD/SUB")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1000.0;
	}
}

TRANSITION_LIST("COUT")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 1000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "y";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
	CHILDREN = 1, 2, 3, 4;
}

DISPLAY_LINE
{
	CHANNEL = "y[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "y[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "y[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "y[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 0;
}

DISPLAY_LINE
{
	CHANNEL = "x";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 0;
	CHILDREN = 6, 7, 8, 9;
}

DISPLAY_LINE
{
	CHANNEL = "x[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "x[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "x[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "x[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 5;
}

DISPLAY_LINE
{
	CHANNEL = "S";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
	CHILDREN = 11, 12, 13, 14;
}

DISPLAY_LINE
{
	CHANNEL = "S[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "S[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "S[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "S[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "ADD/SUB";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "COUT";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 0;
	MASTER = TRUE;
}
;
