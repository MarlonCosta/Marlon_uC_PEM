// Copyright (C) 1991-2016 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 16.0.0 Build 211 04/27/2016 SJ Lite Edition"

// DATE "10/24/2016 16:55:06"

// 
// Device: Altera EP4CE6E22A7 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module Somador_Completo (
	S,
	C_IN,
	A,
	B,
	C_OUT);
output 	S;
input 	C_IN;
input 	A;
input 	B;
output 	C_OUT;

// Design Ports Information
// S	=>  Location: PIN_30,	 I/O Standard: 2.5 V,	 Current Strength: Default
// C_OUT	=>  Location: PIN_32,	 I/O Standard: 2.5 V,	 Current Strength: Default
// C_IN	=>  Location: PIN_28,	 I/O Standard: 2.5 V,	 Current Strength: Default
// A	=>  Location: PIN_10,	 I/O Standard: 2.5 V,	 Current Strength: Default
// B	=>  Location: PIN_31,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
// synopsys translate_off
initial $sdf_annotate("Somador_Completo_7_1200mv_125c_v_slow.sdo");
// synopsys translate_on

wire \S~output_o ;
wire \C_OUT~output_o ;
wire \C_IN~input_o ;
wire \B~input_o ;
wire \A~input_o ;
wire \inst7|inst2~0_combout ;
wire \inst~0_combout ;


// Location: IOOBUF_X0_Y8_N16
cycloneive_io_obuf \S~output (
	.i(\inst7|inst2~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\S~output_o ),
	.obar());
// synopsys translate_off
defparam \S~output .bus_hold = "false";
defparam \S~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y6_N16
cycloneive_io_obuf \C_OUT~output (
	.i(\inst~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\C_OUT~output_o ),
	.obar());
// synopsys translate_off
defparam \C_OUT~output .bus_hold = "false";
defparam \C_OUT~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X0_Y9_N8
cycloneive_io_ibuf \C_IN~input (
	.i(C_IN),
	.ibar(gnd),
	.o(\C_IN~input_o ));
// synopsys translate_off
defparam \C_IN~input .bus_hold = "false";
defparam \C_IN~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y7_N1
cycloneive_io_ibuf \B~input (
	.i(B),
	.ibar(gnd),
	.o(\B~input_o ));
// synopsys translate_off
defparam \B~input .bus_hold = "false";
defparam \B~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y18_N15
cycloneive_io_ibuf \A~input (
	.i(A),
	.ibar(gnd),
	.o(\A~input_o ));
// synopsys translate_off
defparam \A~input .bus_hold = "false";
defparam \A~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X2_Y7_N0
cycloneive_lcell_comb \inst7|inst2~0 (
// Equation(s):
// \inst7|inst2~0_combout  = \C_IN~input_o  $ (\B~input_o  $ (\A~input_o ))

	.dataa(gnd),
	.datab(\C_IN~input_o ),
	.datac(\B~input_o ),
	.datad(\A~input_o ),
	.cin(gnd),
	.combout(\inst7|inst2~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst7|inst2~0 .lut_mask = 16'hC33C;
defparam \inst7|inst2~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X2_Y7_N2
cycloneive_lcell_comb \inst~0 (
// Equation(s):
// \inst~0_combout  = (\C_IN~input_o  & ((\B~input_o ) # (\A~input_o ))) # (!\C_IN~input_o  & (\B~input_o  & \A~input_o ))

	.dataa(gnd),
	.datab(\C_IN~input_o ),
	.datac(\B~input_o ),
	.datad(\A~input_o ),
	.cin(gnd),
	.combout(\inst~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst~0 .lut_mask = 16'hFCC0;
defparam \inst~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign S = \S~output_o ;

assign C_OUT = \C_OUT~output_o ;

endmodule
